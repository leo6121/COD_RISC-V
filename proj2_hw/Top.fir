;buildInfoPackage: chisel3, version: 3.2.8, scalaVersion: 2.12.10, sbtVersion: 1.3.2
circuit Top : 
  module Control : 
    input clock : Clock
    input reset : Reset
    output io : {flip opcode : UInt<7>, branch : UInt<1>, memread : UInt<1>, toreg : UInt<2>, add : UInt<1>, memwrite : UInt<1>, regwrite : UInt<1>, immediate : UInt<1>, alusrc1 : UInt<2>, jump : UInt<2>}
    
    node _T = and(io.opcode, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_1 = eq(UInt<1>("h00"), _T) @[Lookup.scala 31:38]
    node signals_0 = mux(_T_1, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node signals_1 = mux(_T_1, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node signals_2 = mux(_T_1, UInt<1>("h00"), UInt<2>("h03")) @[Lookup.scala 33:37]
    node signals_3 = mux(_T_1, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node signals_4 = mux(_T_1, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node signals_5 = mux(_T_1, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node signals_6 = mux(_T_1, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node signals_7 = mux(_T_1, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node signals_8 = mux(_T_1, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    io.branch <= signals_0 @[control.scala 48:13]
    io.memread <= signals_1 @[control.scala 49:14]
    io.toreg <= signals_2 @[control.scala 50:12]
    io.add <= signals_3 @[control.scala 51:10]
    io.memwrite <= signals_4 @[control.scala 52:15]
    io.immediate <= signals_5 @[control.scala 53:16]
    io.regwrite <= signals_6 @[control.scala 54:15]
    io.alusrc1 <= signals_7 @[control.scala 55:14]
    io.jump <= signals_8 @[control.scala 56:11]
    
  module RegisterFile : 
    input clock : Clock
    input reset : Reset
    output io : {flip readreg1 : UInt<5>, flip readreg2 : UInt<5>, flip writereg : UInt<5>, flip writedata : UInt<32>, flip wen : UInt<1>, readdata1 : UInt<32>, readdata2 : UInt<32>}
    
    reg regs : UInt<32>[32], clock @[register-file.scala 28:17]
    when io.wen : @[register-file.scala 31:17]
      regs[io.writereg] <= io.writedata @[register-file.scala 32:23]
      skip @[register-file.scala 31:17]
    io.readdata1 <= regs[io.readreg1] @[register-file.scala 37:16]
    io.readdata2 <= regs[io.readreg2] @[register-file.scala 38:16]
    
  module ALUControl : 
    input clock : Clock
    input reset : Reset
    output io : {flip add : UInt<1>, flip immediate : UInt<1>, flip funct7 : UInt<7>, flip funct3 : UInt<3>, operation : UInt<4>}
    
    io.operation <= UInt<4>("h0f") @[alucontrol.scala 31:16]
    node _T = eq(io.funct7, UInt<1>("h00")) @[alucontrol.scala 34:19]
    when _T : @[alucontrol.scala 34:37]
      node _T_1 = eq(UInt<1>("h00"), io.funct3) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 40:58]
        io.operation <= UInt<2>("h02") @[alucontrol.scala 36:35]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<2>("h02"), io.funct3) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          io.operation <= UInt<3>("h04") @[alucontrol.scala 37:35]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<2>("h03"), io.funct3) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            io.operation <= UInt<3>("h05") @[alucontrol.scala 38:35]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_4 = eq(UInt<3>("h07"), io.funct3) @[Conditional.scala 37:30]
            when _T_4 : @[Conditional.scala 39:67]
              io.operation <= UInt<1>("h00") @[alucontrol.scala 39:35]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_5 = eq(UInt<3>("h06"), io.funct3) @[Conditional.scala 37:30]
              when _T_5 : @[Conditional.scala 39:67]
                io.operation <= UInt<1>("h01") @[alucontrol.scala 40:35]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_6 = eq(UInt<3>("h04"), io.funct3) @[Conditional.scala 37:30]
                when _T_6 : @[Conditional.scala 39:67]
                  io.operation <= UInt<4>("h09") @[alucontrol.scala 41:35]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_7 = eq(UInt<1>("h01"), io.funct3) @[Conditional.scala 37:30]
                  when _T_7 : @[Conditional.scala 39:67]
                    io.operation <= UInt<3>("h06") @[alucontrol.scala 42:35]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_8 = eq(UInt<3>("h05"), io.funct3) @[Conditional.scala 37:30]
                    when _T_8 : @[Conditional.scala 39:67]
                      io.operation <= UInt<3>("h07") @[alucontrol.scala 43:35]
                      skip @[Conditional.scala 39:67]
      skip @[alucontrol.scala 34:37]
    else : @[alucontrol.scala 45:44]
      node _T_9 = eq(io.funct7, UInt<6>("h020")) @[alucontrol.scala 45:26]
      when _T_9 : @[alucontrol.scala 45:44]
        node _T_10 = eq(io.funct3, UInt<1>("h00")) @[alucontrol.scala 46:21]
        when _T_10 : @[alucontrol.scala 46:34]
          io.operation <= UInt<2>("h03") @[alucontrol.scala 46:48]
          skip @[alucontrol.scala 46:34]
        else : @[alucontrol.scala 47:39]
          node _T_11 = eq(io.funct3, UInt<3>("h05")) @[alucontrol.scala 47:26]
          when _T_11 : @[alucontrol.scala 47:39]
            io.operation <= UInt<4>("h08") @[alucontrol.scala 47:53]
            skip @[alucontrol.scala 47:39]
        skip @[alucontrol.scala 45:44]
    
  module ALU : 
    input clock : Clock
    input reset : Reset
    output io : {flip operation : UInt<4>, flip inputx : UInt<32>, flip inputy : UInt<32>, result : UInt<32>}
    
    io.result <= UInt<1>("h00") @[alu.scala 26:13]
    node _T = eq(UInt<1>("h00"), io.operation) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _T_1 = and(io.inputx, io.inputy) @[alu.scala 30:30]
      io.result <= _T_1 @[alu.scala 30:17]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_2 = eq(UInt<1>("h01"), io.operation) @[Conditional.scala 37:30]
      when _T_2 : @[Conditional.scala 39:67]
        node _T_3 = or(io.inputx, io.inputy) @[alu.scala 33:30]
        io.result <= _T_3 @[alu.scala 33:17]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_4 = eq(UInt<2>("h02"), io.operation) @[Conditional.scala 37:30]
        when _T_4 : @[Conditional.scala 39:67]
          node _T_5 = add(io.inputx, io.inputy) @[alu.scala 36:30]
          node _T_6 = tail(_T_5, 1) @[alu.scala 36:30]
          io.result <= _T_6 @[alu.scala 36:17]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_7 = eq(UInt<2>("h03"), io.operation) @[Conditional.scala 37:30]
          when _T_7 : @[Conditional.scala 39:67]
            node _T_8 = sub(io.inputx, io.inputy) @[alu.scala 39:30]
            node _T_9 = tail(_T_8, 1) @[alu.scala 39:30]
            io.result <= _T_9 @[alu.scala 39:17]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_10 = eq(UInt<3>("h04"), io.operation) @[Conditional.scala 37:30]
            when _T_10 : @[Conditional.scala 39:67]
              node _T_11 = asSInt(io.inputx) @[alu.scala 42:31]
              node _T_12 = asSInt(io.inputy) @[alu.scala 42:50]
              node _T_13 = lt(_T_11, _T_12) @[alu.scala 42:38]
              io.result <= _T_13 @[alu.scala 42:17]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_14 = eq(UInt<3>("h05"), io.operation) @[Conditional.scala 37:30]
              when _T_14 : @[Conditional.scala 39:67]
                node _T_15 = lt(io.inputx, io.inputy) @[alu.scala 45:31]
                io.result <= _T_15 @[alu.scala 45:17]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_16 = eq(UInt<3>("h06"), io.operation) @[Conditional.scala 37:30]
                when _T_16 : @[Conditional.scala 39:67]
                  node _T_17 = bits(io.inputy, 4, 0) @[alu.scala 48:42]
                  node _T_18 = dshl(io.inputx, _T_17) @[alu.scala 48:30]
                  io.result <= _T_18 @[alu.scala 48:17]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_19 = eq(UInt<3>("h07"), io.operation) @[Conditional.scala 37:30]
                  when _T_19 : @[Conditional.scala 39:67]
                    node _T_20 = bits(io.inputy, 4, 0) @[alu.scala 51:42]
                    node _T_21 = dshr(io.inputx, _T_20) @[alu.scala 51:30]
                    io.result <= _T_21 @[alu.scala 51:17]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_22 = eq(UInt<4>("h08"), io.operation) @[Conditional.scala 37:30]
                    when _T_22 : @[Conditional.scala 39:67]
                      node _T_23 = asSInt(io.inputx) @[alu.scala 54:31]
                      node _T_24 = bits(io.inputy, 4, 0) @[alu.scala 54:50]
                      node _T_25 = dshr(_T_23, _T_24) @[alu.scala 54:38]
                      node _T_26 = asUInt(_T_25) @[alu.scala 54:57]
                      io.result <= _T_26 @[alu.scala 54:17]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_27 = eq(UInt<4>("h09"), io.operation) @[Conditional.scala 37:30]
                      when _T_27 : @[Conditional.scala 39:67]
                        node _T_28 = xor(io.inputx, io.inputy) @[alu.scala 57:30]
                        io.result <= _T_28 @[alu.scala 57:17]
                        skip @[Conditional.scala 39:67]
                      else : @[Conditional.scala 39:67]
                        node _T_29 = eq(UInt<4>("h0a"), io.operation) @[Conditional.scala 37:30]
                        when _T_29 : @[Conditional.scala 39:67]
                          node _T_30 = or(io.inputx, io.inputy) @[alu.scala 60:32]
                          node _T_31 = not(_T_30) @[alu.scala 60:20]
                          io.result <= _T_31 @[alu.scala 60:17]
                          skip @[Conditional.scala 39:67]
    
  module ImmediateGenerator : 
    input clock : Clock
    input reset : Reset
    output io : {flip instruction : UInt<32>, sextImm : UInt<32>}
    
    io.sextImm <= UInt<1>("h00") @[helpers.scala 42:14]
    node opcode = bits(io.instruction, 6, 0) @[helpers.scala 44:30]
    node _T = eq(UInt<6>("h037"), opcode) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _T_1 = bits(io.instruction, 31, 12) @[helpers.scala 47:31]
      node _T_2 = mux(UInt<1>("h00"), UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
      node _T_3 = cat(_T_1, _T_2) @[Cat.scala 30:58]
      io.sextImm <= _T_3 @[helpers.scala 48:18]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_4 = eq(UInt<5>("h017"), opcode) @[Conditional.scala 37:30]
      when _T_4 : @[Conditional.scala 39:67]
        node _T_5 = bits(io.instruction, 31, 12) @[helpers.scala 51:31]
        node _T_6 = mux(UInt<1>("h00"), UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
        node _T_7 = cat(_T_5, _T_6) @[Cat.scala 30:58]
        io.sextImm <= _T_7 @[helpers.scala 52:18]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_8 = eq(UInt<7>("h06f"), opcode) @[Conditional.scala 37:30]
        when _T_8 : @[Conditional.scala 39:67]
          node _T_9 = bits(io.instruction, 31, 31) @[helpers.scala 55:35]
          node _T_10 = bits(io.instruction, 19, 12) @[helpers.scala 55:55]
          node _T_11 = bits(io.instruction, 20, 20) @[helpers.scala 56:35]
          node _T_12 = bits(io.instruction, 30, 21) @[helpers.scala 56:55]
          node _T_13 = cat(_T_11, _T_12) @[Cat.scala 30:58]
          node _T_14 = cat(_T_9, _T_10) @[Cat.scala 30:58]
          node _T_15 = cat(_T_14, _T_13) @[Cat.scala 30:58]
          node _T_16 = bits(_T_15, 19, 19) @[helpers.scala 57:36]
          node _T_17 = bits(_T_16, 0, 0) @[Bitwise.scala 72:15]
          node _T_18 = mux(_T_17, UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
          node _T_19 = cat(_T_18, _T_15) @[Cat.scala 30:58]
          node _T_20 = cat(_T_19, UInt<1>("h00")) @[Cat.scala 30:58]
          io.sextImm <= _T_20 @[helpers.scala 57:18]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_21 = eq(UInt<7>("h067"), opcode) @[Conditional.scala 37:30]
          when _T_21 : @[Conditional.scala 39:67]
            node _T_22 = bits(io.instruction, 31, 20) @[helpers.scala 60:31]
            node _T_23 = bits(_T_22, 11, 11) @[helpers.scala 61:36]
            node _T_24 = bits(_T_23, 0, 0) @[Bitwise.scala 72:15]
            node _T_25 = mux(_T_24, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
            node _T_26 = cat(_T_25, _T_22) @[Cat.scala 30:58]
            io.sextImm <= _T_26 @[helpers.scala 61:18]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_27 = eq(UInt<7>("h063"), opcode) @[Conditional.scala 37:30]
            when _T_27 : @[Conditional.scala 39:67]
              node _T_28 = bits(io.instruction, 31, 31) @[helpers.scala 64:35]
              node _T_29 = bits(io.instruction, 7, 7) @[helpers.scala 64:55]
              node _T_30 = bits(io.instruction, 30, 25) @[helpers.scala 65:35]
              node _T_31 = bits(io.instruction, 11, 8) @[helpers.scala 65:58]
              node _T_32 = cat(_T_30, _T_31) @[Cat.scala 30:58]
              node _T_33 = cat(_T_28, _T_29) @[Cat.scala 30:58]
              node _T_34 = cat(_T_33, _T_32) @[Cat.scala 30:58]
              node _T_35 = bits(_T_34, 11, 11) @[helpers.scala 66:37]
              node _T_36 = bits(_T_35, 0, 0) @[Bitwise.scala 72:15]
              node _T_37 = mux(_T_36, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
              node _T_38 = cat(_T_37, _T_34) @[Cat.scala 30:58]
              node _T_39 = cat(_T_38, UInt<1>("h00")) @[Cat.scala 30:58]
              io.sextImm <= _T_39 @[helpers.scala 66:18]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_40 = eq(UInt<2>("h03"), opcode) @[Conditional.scala 37:30]
              when _T_40 : @[Conditional.scala 39:67]
                node _T_41 = bits(io.instruction, 31, 20) @[helpers.scala 69:31]
                node _T_42 = bits(_T_41, 11, 11) @[helpers.scala 70:36]
                node _T_43 = bits(_T_42, 0, 0) @[Bitwise.scala 72:15]
                node _T_44 = mux(_T_43, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
                node _T_45 = cat(_T_44, _T_41) @[Cat.scala 30:58]
                io.sextImm <= _T_45 @[helpers.scala 70:18]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_46 = eq(UInt<6>("h023"), opcode) @[Conditional.scala 37:30]
                when _T_46 : @[Conditional.scala 39:67]
                  node _T_47 = bits(io.instruction, 31, 25) @[helpers.scala 73:35]
                  node _T_48 = bits(io.instruction, 11, 7) @[helpers.scala 73:59]
                  node _T_49 = cat(_T_47, _T_48) @[Cat.scala 30:58]
                  node _T_50 = bits(_T_49, 11, 11) @[helpers.scala 74:36]
                  node _T_51 = bits(_T_50, 0, 0) @[Bitwise.scala 72:15]
                  node _T_52 = mux(_T_51, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
                  node _T_53 = cat(_T_52, _T_49) @[Cat.scala 30:58]
                  io.sextImm <= _T_53 @[helpers.scala 74:18]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_54 = eq(UInt<5>("h013"), opcode) @[Conditional.scala 37:30]
                  when _T_54 : @[Conditional.scala 39:67]
                    node _T_55 = bits(io.instruction, 31, 20) @[helpers.scala 77:31]
                    node _T_56 = bits(_T_55, 11, 11) @[helpers.scala 78:36]
                    node _T_57 = bits(_T_56, 0, 0) @[Bitwise.scala 72:15]
                    node _T_58 = mux(_T_57, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
                    node _T_59 = cat(_T_58, _T_55) @[Cat.scala 30:58]
                    io.sextImm <= _T_59 @[helpers.scala 78:18]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_60 = eq(UInt<7>("h073"), opcode) @[Conditional.scala 37:30]
                    when _T_60 : @[Conditional.scala 39:67]
                      node _T_61 = mux(UInt<1>("h00"), UInt<27>("h07ffffff"), UInt<27>("h00")) @[Bitwise.scala 72:12]
                      node _T_62 = bits(io.instruction, 19, 15) @[helpers.scala 81:53]
                      node _T_63 = cat(_T_61, _T_62) @[Cat.scala 30:58]
                      io.sextImm <= _T_63 @[helpers.scala 81:18]
                      skip @[Conditional.scala 39:67]
    
  module BranchControl : 
    input clock : Clock
    input reset : Reset
    output io : {flip branch : UInt<1>, flip funct3 : UInt<3>, flip inputx : UInt<32>, flip inputy : UInt<32>, taken : UInt<1>}
    
    io.taken <= UInt<1>("h00") @[branch-control.scala 28:12]
    
  module Adder : 
    input clock : Clock
    input reset : Reset
    output io : {flip inputx : UInt<32>, flip inputy : UInt<32>, result : UInt<32>}
    
    node _T = add(io.inputx, io.inputy) @[helpers.scala 23:26]
    node _T_1 = tail(_T, 1) @[helpers.scala 23:26]
    io.result <= _T_1 @[helpers.scala 23:13]
    
  module Adder_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip inputx : UInt<32>, flip inputy : UInt<32>, result : UInt<32>}
    
    node _T = add(io.inputx, io.inputy) @[helpers.scala 23:26]
    node _T_1 = tail(_T, 1) @[helpers.scala 23:26]
    io.result <= _T_1 @[helpers.scala 23:13]
    
  module SingleCycleCPU : 
    input clock : Clock
    input reset : Reset
    output io : {flip imem : {flip address : UInt<32>, instruction : UInt<32>}, flip dmem : {flip address : UInt<32>, flip writedata : UInt<32>, flip memread : UInt<1>, flip memwrite : UInt<1>, flip maskmode : UInt<2>, flip sext : UInt<1>, readdata : UInt<32>}}
    
    io.dmem.readdata is invalid @[cpu.scala 16:6]
    io.dmem.sext is invalid @[cpu.scala 16:6]
    io.dmem.maskmode is invalid @[cpu.scala 16:6]
    io.dmem.memwrite is invalid @[cpu.scala 16:6]
    io.dmem.memread is invalid @[cpu.scala 16:6]
    io.dmem.writedata is invalid @[cpu.scala 16:6]
    io.dmem.address is invalid @[cpu.scala 16:6]
    io.imem.instruction is invalid @[cpu.scala 16:6]
    io.imem.address is invalid @[cpu.scala 16:6]
    reg pc : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[cpu.scala 19:27]
    inst control of Control @[cpu.scala 20:26]
    control.clock <= clock
    control.reset <= reset
    inst registers of RegisterFile @[cpu.scala 21:26]
    registers.clock <= clock
    registers.reset <= reset
    inst aluControl of ALUControl @[cpu.scala 22:26]
    aluControl.clock <= clock
    aluControl.reset <= reset
    inst alu of ALU @[cpu.scala 23:26]
    alu.clock <= clock
    alu.reset <= reset
    inst immGen of ImmediateGenerator @[cpu.scala 24:26]
    immGen.clock <= clock
    immGen.reset <= reset
    inst branchCtrl of BranchControl @[cpu.scala 25:26]
    branchCtrl.clock <= clock
    branchCtrl.reset <= reset
    inst pcPlusFour of Adder @[cpu.scala 26:26]
    pcPlusFour.clock <= clock
    pcPlusFour.reset <= reset
    inst branchAdd of Adder_1 @[cpu.scala 27:26]
    branchAdd.clock <= clock
    branchAdd.reset <= reset
    reg value : UInt<30>, clock with : (reset => (reset, UInt<30>("h00"))) @[Counter.scala 29:33]
    wire _T : UInt<1>
    _T <= UInt<1>("h00")
    when UInt<1>("h01") : @[Counter.scala 67:17]
      node _T_1 = eq(value, UInt<30>("h03fffffff")) @[Counter.scala 38:24]
      node _T_2 = add(value, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_3 = tail(_T_2, 1) @[Counter.scala 39:22]
      value <= _T_3 @[Counter.scala 39:13]
      _T <= _T_1 @[Counter.scala 67:24]
      skip @[Counter.scala 67:17]
    control.io.jump is invalid @[cpu.scala 31:17]
    control.io.alusrc1 is invalid @[cpu.scala 31:17]
    control.io.immediate is invalid @[cpu.scala 31:17]
    control.io.regwrite is invalid @[cpu.scala 31:17]
    control.io.memwrite is invalid @[cpu.scala 31:17]
    control.io.add is invalid @[cpu.scala 31:17]
    control.io.toreg is invalid @[cpu.scala 31:17]
    control.io.memread is invalid @[cpu.scala 31:17]
    control.io.branch is invalid @[cpu.scala 31:17]
    control.io.opcode is invalid @[cpu.scala 31:17]
    registers.io.readdata2 is invalid @[cpu.scala 32:17]
    registers.io.readdata1 is invalid @[cpu.scala 32:17]
    registers.io.wen is invalid @[cpu.scala 32:17]
    registers.io.writedata is invalid @[cpu.scala 32:17]
    registers.io.writereg is invalid @[cpu.scala 32:17]
    registers.io.readreg2 is invalid @[cpu.scala 32:17]
    registers.io.readreg1 is invalid @[cpu.scala 32:17]
    aluControl.io.operation is invalid @[cpu.scala 33:17]
    aluControl.io.funct3 is invalid @[cpu.scala 33:17]
    aluControl.io.funct7 is invalid @[cpu.scala 33:17]
    aluControl.io.immediate is invalid @[cpu.scala 33:17]
    aluControl.io.add is invalid @[cpu.scala 33:17]
    alu.io.result is invalid @[cpu.scala 34:17]
    alu.io.inputy is invalid @[cpu.scala 34:17]
    alu.io.inputx is invalid @[cpu.scala 34:17]
    alu.io.operation is invalid @[cpu.scala 34:17]
    immGen.io.sextImm is invalid @[cpu.scala 35:17]
    immGen.io.instruction is invalid @[cpu.scala 35:17]
    branchCtrl.io.taken is invalid @[cpu.scala 36:17]
    branchCtrl.io.inputy is invalid @[cpu.scala 36:17]
    branchCtrl.io.inputx is invalid @[cpu.scala 36:17]
    branchCtrl.io.funct3 is invalid @[cpu.scala 36:17]
    branchCtrl.io.branch is invalid @[cpu.scala 36:17]
    pcPlusFour.io.result is invalid @[cpu.scala 37:17]
    pcPlusFour.io.inputy is invalid @[cpu.scala 37:17]
    pcPlusFour.io.inputx is invalid @[cpu.scala 37:17]
    branchAdd.io.result is invalid @[cpu.scala 38:17]
    branchAdd.io.inputy is invalid @[cpu.scala 38:17]
    branchAdd.io.inputx is invalid @[cpu.scala 38:17]
    io.imem.address <= pc @[cpu.scala 40:19]
    node _T_4 = asUInt(reset) @[cpu.scala 56:9]
    node _T_5 = eq(_T_4, UInt<1>("h00")) @[cpu.scala 56:9]
    when _T_5 : @[cpu.scala 56:9]
      printf(clock, UInt<1>(1), "DASM(%x)\n", io.imem.instruction) @[cpu.scala 56:9]
      skip @[cpu.scala 56:9]
    node _T_6 = asUInt(reset) @[cpu.scala 57:9]
    node _T_7 = eq(_T_6, UInt<1>("h00")) @[cpu.scala 57:9]
    when _T_7 : @[cpu.scala 57:9]
      printf(clock, UInt<1>(1), "CYCLE=%d\n", value) @[cpu.scala 57:9]
      skip @[cpu.scala 57:9]
    node _T_8 = asUInt(reset) @[cpu.scala 58:9]
    node _T_9 = eq(_T_8, UInt<1>("h00")) @[cpu.scala 58:9]
    when _T_9 : @[cpu.scala 58:9]
      printf(clock, UInt<1>(1), "pc: %d\n", pc) @[cpu.scala 58:9]
      skip @[cpu.scala 58:9]
    node _T_10 = asUInt(reset) @[cpu.scala 60:11]
    node _T_11 = eq(_T_10, UInt<1>("h00")) @[cpu.scala 60:11]
    when _T_11 : @[cpu.scala 60:11]
      printf(clock, UInt<1>(1), "control: AnonymousBundle(opcode -> %d, branch -> %d, memread -> %d, toreg -> %d, add -> %d, memwrite -> %d, regwrite -> %d, immediate -> %d, alusrc1 -> %d, jump -> %d)\n", control.io.opcode, control.io.branch, control.io.memread, control.io.toreg, control.io.add, control.io.memwrite, control.io.regwrite, control.io.immediate, control.io.alusrc1, control.io.jump) @[cpu.scala 60:11]
      skip @[cpu.scala 60:11]
    node _T_12 = asUInt(reset) @[cpu.scala 60:11]
    node _T_13 = eq(_T_12, UInt<1>("h00")) @[cpu.scala 60:11]
    when _T_13 : @[cpu.scala 60:11]
      printf(clock, UInt<1>(1), "registers: AnonymousBundle(readreg1 -> %d, readreg2 -> %d, writereg -> %d, writedata -> %d, wen -> %d, readdata1 -> %d, readdata2 -> %d)\n", registers.io.readreg1, registers.io.readreg2, registers.io.writereg, registers.io.writedata, registers.io.wen, registers.io.readdata1, registers.io.readdata2) @[cpu.scala 60:11]
      skip @[cpu.scala 60:11]
    node _T_14 = asUInt(reset) @[cpu.scala 60:11]
    node _T_15 = eq(_T_14, UInt<1>("h00")) @[cpu.scala 60:11]
    when _T_15 : @[cpu.scala 60:11]
      printf(clock, UInt<1>(1), "aluControl: AnonymousBundle(add -> %d, immediate -> %d, funct7 -> %d, funct3 -> %d, operation -> %d)\n", aluControl.io.add, aluControl.io.immediate, aluControl.io.funct7, aluControl.io.funct3, aluControl.io.operation) @[cpu.scala 60:11]
      skip @[cpu.scala 60:11]
    node _T_16 = asUInt(reset) @[cpu.scala 60:11]
    node _T_17 = eq(_T_16, UInt<1>("h00")) @[cpu.scala 60:11]
    when _T_17 : @[cpu.scala 60:11]
      printf(clock, UInt<1>(1), "alu: AnonymousBundle(operation -> %d, inputx -> %d, inputy -> %d, result -> %d)\n", alu.io.operation, alu.io.inputx, alu.io.inputy, alu.io.result) @[cpu.scala 60:11]
      skip @[cpu.scala 60:11]
    node _T_18 = asUInt(reset) @[cpu.scala 60:11]
    node _T_19 = eq(_T_18, UInt<1>("h00")) @[cpu.scala 60:11]
    when _T_19 : @[cpu.scala 60:11]
      printf(clock, UInt<1>(1), "immGen: AnonymousBundle(instruction -> %d, sextImm -> %d)\n", immGen.io.instruction, immGen.io.sextImm) @[cpu.scala 60:11]
      skip @[cpu.scala 60:11]
    node _T_20 = asUInt(reset) @[cpu.scala 60:11]
    node _T_21 = eq(_T_20, UInt<1>("h00")) @[cpu.scala 60:11]
    when _T_21 : @[cpu.scala 60:11]
      printf(clock, UInt<1>(1), "branchCtrl: AnonymousBundle(branch -> %d, funct3 -> %d, inputx -> %d, inputy -> %d, taken -> %d)\n", branchCtrl.io.branch, branchCtrl.io.funct3, branchCtrl.io.inputx, branchCtrl.io.inputy, branchCtrl.io.taken) @[cpu.scala 60:11]
      skip @[cpu.scala 60:11]
    node _T_22 = asUInt(reset) @[cpu.scala 60:11]
    node _T_23 = eq(_T_22, UInt<1>("h00")) @[cpu.scala 60:11]
    when _T_23 : @[cpu.scala 60:11]
      printf(clock, UInt<1>(1), "pcPlusFour: AnonymousBundle(inputx -> %d, inputy -> %d, result -> %d)\n", pcPlusFour.io.inputx, pcPlusFour.io.inputy, pcPlusFour.io.result) @[cpu.scala 60:11]
      skip @[cpu.scala 60:11]
    node _T_24 = asUInt(reset) @[cpu.scala 60:11]
    node _T_25 = eq(_T_24, UInt<1>("h00")) @[cpu.scala 60:11]
    when _T_25 : @[cpu.scala 60:11]
      printf(clock, UInt<1>(1), "branchAdd: AnonymousBundle(inputx -> %d, inputy -> %d, result -> %d)\n", branchAdd.io.inputx, branchAdd.io.inputy, branchAdd.io.result) @[cpu.scala 60:11]
      skip @[cpu.scala 60:11]
    node _T_26 = asUInt(reset) @[cpu.scala 62:9]
    node _T_27 = eq(_T_26, UInt<1>("h00")) @[cpu.scala 62:9]
    when _T_27 : @[cpu.scala 62:9]
      printf(clock, UInt<1>(1), "\n") @[cpu.scala 62:9]
      skip @[cpu.scala 62:9]
    
  module DualPortedMemory : 
    input clock : Clock
    input reset : Reset
    output io : {imem : {flip address : UInt<32>, instruction : UInt<32>}, dmem : {flip address : UInt<32>, flip writedata : UInt<32>, flip memread : UInt<1>, flip memwrite : UInt<1>, flip maskmode : UInt<2>, flip sext : UInt<1>, readdata : UInt<32>}}
    
    io.dmem.readdata is invalid @[memory.scala 58:6]
    io.dmem.sext is invalid @[memory.scala 58:6]
    io.dmem.maskmode is invalid @[memory.scala 58:6]
    io.dmem.memwrite is invalid @[memory.scala 58:6]
    io.dmem.memread is invalid @[memory.scala 58:6]
    io.dmem.writedata is invalid @[memory.scala 58:6]
    io.dmem.address is invalid @[memory.scala 58:6]
    io.imem.instruction is invalid @[memory.scala 58:6]
    io.imem.address is invalid @[memory.scala 58:6]
    cmem memory : UInt<32>[1024] @[memory.scala 60:19]
    node _T = shr(io.imem.address, 2) @[memory.scala 63:49]
    node _T_1 = bits(_T, 9, 0) @[memory.scala 63:32]
    infer mport _T_2 = memory[_T_1], clock @[memory.scala 63:32]
    io.imem.instruction <= _T_2 @[memory.scala 63:23]
    when io.dmem.memread : @[memory.scala 65:26]
      wire _T_3 : UInt<32> @[memory.scala 66:24]
      node _T_4 = neq(io.dmem.maskmode, UInt<2>("h02")) @[memory.scala 68:28]
      when _T_4 : @[memory.scala 68:37]
        node _T_5 = bits(io.dmem.address, 1, 0) @[memory.scala 69:35]
        node _T_6 = shr(io.dmem.address, 2) @[memory.scala 70:42]
        node _T_7 = bits(_T_6, 9, 0) @[memory.scala 70:25]
        infer mport _T_8 = memory[_T_7], clock @[memory.scala 70:25]
        node _T_9 = mul(_T_5, UInt<4>("h08")) @[memory.scala 70:59]
        node _T_10 = dshr(_T_8, _T_9) @[memory.scala 70:48]
        _T_3 <= _T_10 @[memory.scala 70:16]
        node _T_11 = eq(io.dmem.maskmode, UInt<1>("h00")) @[memory.scala 71:30]
        when _T_11 : @[memory.scala 71:39]
          node _T_12 = shr(io.dmem.address, 2) @[memory.scala 72:44]
          node _T_13 = bits(_T_12, 9, 0) @[memory.scala 72:27]
          infer mport _T_14 = memory[_T_13], clock @[memory.scala 72:27]
          node _T_15 = and(_T_14, UInt<8>("h0ff")) @[memory.scala 72:50]
          _T_3 <= _T_15 @[memory.scala 72:18]
          skip @[memory.scala 71:39]
        else : @[memory.scala 73:20]
          node _T_16 = shr(io.dmem.address, 2) @[memory.scala 74:44]
          node _T_17 = bits(_T_16, 9, 0) @[memory.scala 74:27]
          infer mport _T_18 = memory[_T_17], clock @[memory.scala 74:27]
          node _T_19 = and(_T_18, UInt<16>("h0ffff")) @[memory.scala 74:50]
          _T_3 <= _T_19 @[memory.scala 74:18]
          skip @[memory.scala 73:20]
        skip @[memory.scala 68:37]
      else : @[memory.scala 76:18]
        node _T_20 = shr(io.dmem.address, 2) @[memory.scala 77:42]
        node _T_21 = bits(_T_20, 9, 0) @[memory.scala 77:25]
        infer mport _T_22 = memory[_T_21], clock @[memory.scala 77:25]
        _T_3 <= _T_22 @[memory.scala 77:16]
        skip @[memory.scala 76:18]
      when io.dmem.sext : @[memory.scala 80:25]
        node _T_23 = eq(io.dmem.maskmode, UInt<1>("h00")) @[memory.scala 81:30]
        when _T_23 : @[memory.scala 81:39]
          node _T_24 = bits(_T_3, 7, 7) @[memory.scala 82:50]
          node _T_25 = bits(_T_24, 0, 0) @[Bitwise.scala 72:15]
          node _T_26 = mux(_T_25, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
          node _T_27 = bits(_T_3, 7, 0) @[memory.scala 82:64]
          node _T_28 = cat(_T_26, _T_27) @[Cat.scala 30:58]
          io.dmem.readdata <= _T_28 @[memory.scala 82:26]
          skip @[memory.scala 81:39]
        else : @[memory.scala 83:20]
          node _T_29 = bits(_T_3, 15, 15) @[memory.scala 84:50]
          node _T_30 = bits(_T_29, 0, 0) @[Bitwise.scala 72:15]
          node _T_31 = mux(_T_30, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
          node _T_32 = bits(_T_3, 15, 0) @[memory.scala 84:65]
          node _T_33 = cat(_T_31, _T_32) @[Cat.scala 30:58]
          io.dmem.readdata <= _T_33 @[memory.scala 84:26]
          skip @[memory.scala 83:20]
        skip @[memory.scala 80:25]
      else : @[memory.scala 86:18]
        io.dmem.readdata <= _T_3 @[memory.scala 87:24]
        skip @[memory.scala 86:18]
      skip @[memory.scala 65:26]
    when io.dmem.memwrite : @[memory.scala 91:27]
      node _T_34 = neq(io.dmem.maskmode, UInt<2>("h02")) @[memory.scala 92:28]
      when _T_34 : @[memory.scala 92:37]
        node _T_35 = bits(io.dmem.address, 1, 0) @[memory.scala 93:35]
        wire _T_36 : UInt<32> @[memory.scala 95:26]
        node _T_37 = shr(io.dmem.address, 2) @[memory.scala 96:42]
        node _T_38 = bits(_T_37, 9, 0) @[memory.scala 96:25]
        infer mport _T_39 = memory[_T_38], clock @[memory.scala 96:25]
        _T_36 <= _T_39 @[memory.scala 96:16]
        wire _T_40 : UInt<32> @[memory.scala 98:22]
        node _T_41 = eq(io.dmem.maskmode, UInt<1>("h00")) @[memory.scala 99:30]
        when _T_41 : @[memory.scala 99:39]
          node _T_42 = mul(_T_35, UInt<4>("h08")) @[memory.scala 100:48]
          node _T_43 = dshl(UInt<8>("h0ff"), _T_42) @[memory.scala 100:37]
          node _T_44 = not(_T_43) @[memory.scala 100:28]
          node _T_45 = and(_T_36, _T_44) @[memory.scala 100:26]
          _T_40 <= _T_45 @[memory.scala 100:14]
          skip @[memory.scala 99:39]
        else : @[memory.scala 101:20]
          node _T_46 = mul(_T_35, UInt<4>("h08")) @[memory.scala 102:50]
          node _T_47 = dshl(UInt<16>("h0ffff"), _T_46) @[memory.scala 102:39]
          node _T_48 = not(_T_47) @[memory.scala 102:28]
          node _T_49 = and(_T_36, _T_48) @[memory.scala 102:26]
          _T_40 <= _T_49 @[memory.scala 102:14]
          skip @[memory.scala 101:20]
        node _T_50 = shr(io.dmem.address, 2) @[memory.scala 104:30]
        node _T_51 = bits(_T_50, 9, 0) @[memory.scala 104:13]
        infer mport _T_52 = memory[_T_51], clock @[memory.scala 104:13]
        node _T_53 = mul(_T_35, UInt<4>("h08")) @[memory.scala 104:76]
        node _T_54 = dshl(io.dmem.writedata, _T_53) @[memory.scala 104:65]
        node _T_55 = or(_T_40, _T_54) @[memory.scala 104:44]
        _T_52 <= _T_55 @[memory.scala 104:36]
        skip @[memory.scala 92:37]
      else : @[memory.scala 105:18]
        node _T_56 = shr(io.dmem.address, 2) @[memory.scala 106:30]
        node _T_57 = bits(_T_56, 9, 0) @[memory.scala 106:13]
        infer mport _T_58 = memory[_T_57], clock @[memory.scala 106:13]
        _T_58 <= io.dmem.writedata @[memory.scala 106:36]
        skip @[memory.scala 105:18]
      skip @[memory.scala 91:27]
    
  module Top : 
    input clock : Clock
    input reset : UInt<1>
    output io : {success : UInt<1>}
    
    io.success is invalid @[top.scala 12:14]
    inst cpu of SingleCycleCPU @[top.scala 14:21]
    cpu.clock <= clock
    cpu.reset <= reset
    inst mem of DualPortedMemory @[top.scala 15:20]
    mem.clock <= clock
    mem.reset <= reset
    cpu.io.imem.instruction <= mem.io.imem.instruction @[top.scala 17:15]
    mem.io.imem.address <= cpu.io.imem.address @[top.scala 17:15]
    cpu.io.dmem.readdata <= mem.io.dmem.readdata @[top.scala 18:15]
    mem.io.dmem.sext <= cpu.io.dmem.sext @[top.scala 18:15]
    mem.io.dmem.maskmode <= cpu.io.dmem.maskmode @[top.scala 18:15]
    mem.io.dmem.memwrite <= cpu.io.dmem.memwrite @[top.scala 18:15]
    mem.io.dmem.memread <= cpu.io.dmem.memread @[top.scala 18:15]
    mem.io.dmem.writedata <= cpu.io.dmem.writedata @[top.scala 18:15]
    mem.io.dmem.address <= cpu.io.dmem.address @[top.scala 18:15]
    
